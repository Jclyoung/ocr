{"version":3,"sources":["assets/bacon.png","App.js","reportWebVitals.js","index.js"],"names":["Tesseract","window","DefaultImage","className","src","ipsum","App","worker","createWorker","logger","m","console","log","langPath","gzip","doOCR","a","load","loadLanguage","initialize","recognize","sourceImage","text","data","setAnalyzingImage","setOcr","useState","ocr","setSourceImage","analyzingMessage","UserImage","image","URL","createObjectURL","alt","useEffect","type","name","onChange","e","target","files","preventDefault","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAAe,G,MAAA,IAA0B,mCCMnCA,EAAYC,OAAOD,UAEnBE,EAAe,kBACnB,qBAAKC,UAAU,MAAMC,IAAMC,KAwDdC,MArDf,WACE,IAAMC,EAASP,EAAUQ,aAAa,CACpCC,OAAQ,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,IACzBG,SAAU,sBACVC,MAAM,IAGFC,EAAK,uCAAG,8BAAAC,EAAA,sEACNT,EAAOU,OADD,uBAENV,EAAOW,aAAa,OAFd,uBAGNX,EAAOY,WAAW,OAHZ,uBAIqBZ,EAAOa,UAAUC,GAAehB,GAJrD,gBAIIiB,EAJJ,EAIJC,KAAQD,KAChBE,EAAkB,IAClBC,EAAOH,GANK,4CAAH,qDAPE,EAgBSI,qBAhBT,mBAgBNC,EAhBM,KAgBDF,EAhBC,OAiByBC,mBAAS,IAjBlC,mBAiBNL,EAjBM,KAiBOO,EAjBP,OAkBiCF,mBAAS,uBAlB1C,mBAkBNG,EAlBM,KAkBYL,EAlBZ,KAoBPM,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAChB,qBAAK5B,UAAU,MAAMC,IAAM4B,IAAIC,gBAAgBF,GAASG,IAAI,MAO9D,OAJAC,qBAAU,WACRpB,OAIA,sBAAKZ,UAAU,MAAf,UACE,sBAAKA,UAAU,MAAf,UACE,+CACA,+BACE,uBAAOiC,KAAK,OACVC,KAAK,OACLC,SAAW,SAACC,GACVX,EAAeW,EAAEC,OAAOC,MAAM,IAC9BhB,EAAO,IACPD,EAAkB,qBAClBe,EAAEG,sBAGLrB,EAAiC,cAACS,EAAD,CAAWC,MAAQV,IAAtC,cAAC,EAAD,OAEnB,sBAAKlB,UAAU,YAAf,UACE,mDACA,4BAAK0B,IACL,4BAAKF,WC/CEgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fc989bec.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bacon.77c731c6.png\";","\nimport React, { useEffect, useState } from 'react';\n\nimport './App.css';\nimport ipsum from './assets/bacon.png';\n\nconst Tesseract = window.Tesseract;\n\nconst DefaultImage = () => (\n  <img className=\"img\" src={ ipsum } />\n);\n\nfunction App() {\n  const worker = Tesseract.createWorker({\n    logger: m => console.log(m),\n    langPath: '/customLanguageData',\n    gzip: false\n  });\n\n  const doOCR = async () => {\n    await worker.load();\n    await worker.loadLanguage('eng');\n    await worker.initialize('eng');\n    const { data: { text } } = await worker.recognize(sourceImage || ipsum);\n    setAnalyzingImage('')\n    setOcr(text);\n  };\n\n  const [ocr, setOcr] = useState();\n  const [sourceImage, setSourceImage] = useState(\"\");\n  const [analyzingMessage, setAnalyzingImage] = useState('Analyzing image....');\n\n  const UserImage = ({ image }) => (\n    <img className=\"img\" src={ URL.createObjectURL(image) } alt=\"\"/>\n  )\n\n  useEffect(() => {\n    doOCR();\n  });\n\n  return (\n    <div className=\"App\">\n      <div className=\"img\">\n        <h1>image to test</h1>\n        <form >\n          <input type=\"file\"\n            name=\"file\" \n            onChange={ (e) => {\n              setSourceImage(e.target.files[0]);\n              setOcr('');\n              setAnalyzingImage('Analyzing text...');\n              e.preventDefault();\n          }} />\n        </form>\n        { !sourceImage ? <DefaultImage /> : <UserImage image={ sourceImage } /> }\n      </div>\n      <div className=\"text-main\">\n        <h1>new rendered text</h1>\n        <p>{ analyzingMessage }</p>\n        <p>{ ocr }</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}